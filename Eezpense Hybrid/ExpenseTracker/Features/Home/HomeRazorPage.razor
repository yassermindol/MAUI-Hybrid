@using ExpenseTracker.Features.Home.ViewModels;
@inject HomeViewModeV2 _viewModel

<div style="display:flex; flex-direction:column;height:100vh; overflow:hidden;background-color:var(--bg-color)">
    @if (_viewModel.IsBusy)
    {
        <StatusRing />
    }
    else
    {
        @if (_viewModel.IsExpenseListGroupedByCategory)
        {
            <ExpenseListByCategory ItemsSource="@_viewModel.UiGroupByCategoryExpenses"
                                   ItemClicked="(id) => OnClickItem(id)" CurrencySymbol="@_viewModel.TotalCurrencySymbol" />
        }
        else
        {
            <ExpenseList ItemsSource="@_viewModel.UiExpenses"
                         ItemClicked="(id) => OnClickItem(id)" CurrencySymbol="@_viewModel.TotalCurrencySymbol" />
        }
    }
</div>

@code {

    protected override Task OnInitializedAsync()
    {
        _viewModel.StateHasChanged = StateHasChanged;
        return base.OnInitializedAsync();
    }

    private void OnClickItem(long expenseID)
    {

    }
}
