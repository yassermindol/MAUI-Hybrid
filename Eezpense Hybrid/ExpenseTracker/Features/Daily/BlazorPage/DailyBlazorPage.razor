@using ExpenseTracker.Features.Daily.BlazorPage
@inject DailyBlazorViewModel _viewModel

<div style="display:flex; flex-direction:column;height:100vh; overflow:hidden;">

    @if (_viewModel.IsBusy)
    {
        <StatusRing />
    }
    else
    {
        @if (_viewModel.IsNoRecordsToShowVisible)
        {
            <div style="display:flex;flex:1;align-items:center; justify-content:center;">
                <label style="font-size:15px;font-weight:400;">No records to show.</label>
            </div>            
        }
        else
        {
            <div style="margin:5px 10px;">
                <label style="font-size:14px;font-weight:500">Total: </label>
                <label style="font-size:14px;font-weight:500">@_viewModel.CurrencySymbol</label>
                <label style="font-size:14px;font-weight:500">@_viewModel.Total</label>
            </div>

            <ul class="list-group" style="flex:1; overflow-y:auto;">
                @foreach (var item in _viewModel.DailyItems)
                {
                    <li class="list-group-item" style="padding:0;padding-top:10px;background-color:#F3F4F6;" @key="item.ID" @onclick="() => OnItemClicked(item.ID)">
                        <div style="display:flex; flex-direction:row; align-items:center;
                             margin-left:10px;margin-right:10px;">
                            <div style="display:flex; flex-direction:column; flex:1; cursor:pointer;margin-right:10px;">
                                <div style="display:flex; flex-direction:row;">
                                    <label style="margin-bottom:4px;font-size:14px;font-weight:600;">@item.Date</label>
                                    <label style="margin-left:auto;margin-right:4px;font-size:14px;font-weight:600;">@_viewModel.CurrencySymbol</label>
                                    <label style="margin-right:8px;font-size:14px;font-weight:600;"> @item.TotalStr</label>
                                </div>
                                <div style="background-color:@item.BarcolorCssHex;height:12px;width:@item.BarWidthPercentage;margin-bottom:10px;margin-top:2px;border-radius:5px;"></div>
                            </div>
                            <span class="badge bg-secondary">
                                @((item.IsExpanded) ? "−" : "+")
                            </span>
                        </div>

                        @if (item.IsExpanded && item.Expenses?.Any() == true)
                        {
                            <ul class="list-group mt-2">
                                @foreach (var sub in item.Expenses)
                                {
                                    <li class="list-group-item list-group-item-action" style="padding-left:12px;padding-right:8px;">
                                        <div style="display:flex; flex-direction:column; flex:1; cursor:pointer;">
                                            <div style="display:flex; flex-direction:row;flex:1;">
                                                <label style="margin-bottom:4px;font-size:14px;font-weight:500;">@sub.Category</label>
                                                <label style="margin-left:auto;margin-right:4px;font-size:14px;font-weight:500;">@_viewModel.CurrencySymbol</label>
                                                <label style="margin-right:8px;font-size:14px;font-weight:500;"> @sub.AmountStr</label>
                                            </div>
                                            <div style="display:flex; flex-direction:row;flex:1;padding:0px;">
                                                <label style="
                                                    margin-right:10px;
                                                    flex:1;
                                                    overflow:hidden;
                                                    display:-webkit-box;
                                                    -webkit-box-orient:vertical;
                                                    -webkit-line-clamp:2;
                                                    line-height:1.2em;
                                                    font-size:14px;
                                                    text-overflow:ellipsis;">@sub.Note</label>
                                                <label style="margin-left:auto;margin-right:8px;font-size:14px;">@sub.Date</label>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
    }

    <MauiButton Text="@_viewModel.SelectDateButtonText" OnClickCallback="OnButtonClick" IsEnabled="!_viewModel.IsBusy" />
</div>


@code {
    private bool IsButtonEnabled = true;

    private void OnButtonClick()
    {
        _viewModel.SelectDateRangeCommand.Execute(null);
    }

    List<ListItem> Items;
    private void GenerateDummyData()
    {
        Items = new()
            {
            new ListItem
            {
                Id = 1,
                Title = "Fruits",
                SubItems = new List<string> { "Apple", "Banana", "Cherry" }
            },
            new ListItem
            {
                Id = 2,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
            new ListItem
            {
                Id = 3,
                Title = "Dairy",
                SubItems = new List<string> { "Milk", "Cheese" }
            },
             new ListItem
            {
                Id = 4,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 5,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 6,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 7,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 8,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 9,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 10,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 11,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 12,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
             new ListItem
            {
                Id = 13,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 14,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 15,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 16,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 17,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 18,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 19,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
              new ListItem
            {
                Id = 20,
                Title = "Vegetables",
                SubItems = new List<string> { "Carrot", "Lettuce", "Tomato" }
            },
        };
    }

    private void OnItemClicked(long id)
    {
        IsButtonEnabled = id % 2 == 0 ? true : false;
        var item = _viewModel.DailyItems.FirstOrDefault(i => i.ID == id);
        if (item != null)
        {
            item.IsExpanded = !item.IsExpanded;
        }
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _viewModel.StateHasChanged -= StateHasChanged;
        _viewModel.StateHasChanged += StateHasChanged;
        //GenerateDummyData();
        await _viewModel.LoadDataAsync();
    }

    class ListItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public bool IsExpanded { get; set; }
        public List<string> SubItems { get; set; } = new();
    }
}