@using ExpenseTracker.Features.Daily
@inject DailyViewModel _viewModel
@inject IJSRuntime JS

<div style="display:flex; flex-direction:column;height:100vh; overflow:hidden;background-color:var(--bg-color)">

    @if (_viewModel.IsBusy)
    {
        <StatusRing />
    }
    else
    {
        @if (_viewModel.IsNoRecordsToShowVisible)
        {
            <div style="display:flex;flex:1;align-items:center; justify-content:center;">
                <label style="font-size:15px;font-weight:400;color:var(--text-color)">No records to show.</label>
            </div>
        }
        else
        {
            <div style="margin:5px 10px;">
                <label style="font-size:14px;font-weight:500">Total: </label>
                <label style="font-size:14px;font-weight:500">@_viewModel.CurrencySymbol</label>
                <label style="font-size:14px;font-weight:500">@_viewModel.Total</label>
            </div>

            <ul class="list-group" style="flex:1; overflow-y:auto;">
                @foreach (var dayItem in _viewModel.DailyItems)
                {
                    <li class="list-group-item" style="padding:0;padding-top:10px;background-color:var(--list-item-main-bg);" @key="dayItem.ID" @onclick="() => OnDayClicked(dayItem.ID)">
                        <div style="display:flex; flex-direction:row; align-items:center; margin-left:10px;margin-right:10px;">
                            <div style="display:flex; flex-direction:column; flex:1; cursor:pointer;margin-right:10px;">
                                <div style="display:flex; flex-direction:row;">
                                    <label style="margin-bottom:4px;font-size:14px;font-weight:600;color:var(--text-color)">@dayItem.Date</label>
                                    <label style="margin-left:auto;margin-right:4px;font-size:14px;font-weight:600;color:var(--text-color)">@_viewModel.CurrencySymbol</label>
                                    <label style="margin-right:8px;font-size:14px;font-weight:600;color:var(--text-color)"> @dayItem.TotalStr</label>
                                </div>
                                <div style="background-color:@dayItem.BarcolorCssHex;height:12px;width:@dayItem.BarWidthPercentage;margin-bottom:10px;margin-top:2px;border-radius:5px;"></div>
                            </div>
                            <span class="badge bg-secondary">
                                @((dayItem.IsExpanded) ? "−" : "+")
                            </span>
                        </div>

                        @if (dayItem.IsExpanded && dayItem.Expenses?.Any() == true)
                        {
                            <ul class="list-group mt-2">
                                @foreach (var expenseItem in dayItem.Expenses)
                                {
                                    <li class="list-group-item list-group-item-action" style="padding-left:12px;padding-right:8px;background-color:var(--list-sub-item-bg);"
                                        @onclick="() => OnExpenseItemClicked(expenseItem.ID)">
                                        <div style="display:flex; flex-direction:column; flex:1; cursor:pointer;">
                                            <div style="display:flex; flex-direction:row;flex:1;">
                                                <label style="margin-bottom:4px;font-size:14px;font-weight:500;color:var(--text-color)">@expenseItem.Category</label>
                                                <label style="margin-left:auto;margin-right:4px;font-size:14px;font-weight:500;color:var(--text-color)">@_viewModel.CurrencySymbol</label>
                                                <label style="margin-right:8px;font-size:14px;font-weight:500;color:var(--text-color)"> @expenseItem.AmountStr</label>
                                            </div>
                                            <div style="display:flex; flex-direction:row;flex:1;padding:0px;">
                                                <label style="margin-right:10px;flex:1;overflow:hidden;
                                                        display:-webkit-box;
                                                        -webkit-box-orient:vertical;
                                                        -webkit-line-clamp:2;
                                                        line-height:1.2em;
                                                        font-size:14px;
                                                        color:var(--text-color);
                                                        text-overflow:ellipsis;">@expenseItem.Note</label>
                                                <label style="margin-left:auto;margin-right:4px;font-size:14px;color:var(--text-color)">@expenseItem.Date | </label>
                                                <label style="margin-right:8px;font-size:14px;color:var(--text-color)">@expenseItem.Time</label>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
    }

    @if (_isFirstLoad == false)
    {
        <MauiButton Text="@_viewModel.SelectDateButtonText" OnClickCallback="OnDateRangeButtonClick" IsEnabled="!_viewModel.IsBusy" />
    }

</div>


@code {
    bool _isFirstLoad = true;
    bool _expenseItemClicked = false;
    private void OnExpenseItemClicked(long id)
    {
        if (_expenseItemClicked)
            return;
        _expenseItemClicked = true;
        MainThread.InvokeOnMainThreadAsync(() => _viewModel.UiExpenseItemSelectedAsync(id, () => _expenseItemClicked = false));
    }

    private async void OnDateRangeButtonClick()
    {
        _viewModel.SelectDateRangeCommand.Execute(null);
    }

    private void OnDayClicked(long id)
    {
        if (_expenseItemClicked)
            return;

        var item = _viewModel.DailyItems.FirstOrDefault(i => i.ID == id);
        if (item != null)
        {
            item.IsExpanded = !item.IsExpanded;
        }
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _viewModel.StateHasChanged -= StateHasChanged;
        _viewModel.StateHasChanged += StateHasChanged;
        if (App.IsDarkMode)
            await JS.InvokeVoidAsync("setTheme", "dark");
        else
            await JS.InvokeVoidAsync("setTheme", "light");
        await _viewModel.LoadDataAsync();
        App.OnThemeChanged = OnThemeChaconged;
        _isFirstLoad = false;
    }

    private void OnThemeChaconged(bool isDarkMode)
    {
        MainThread.InvokeOnMainThreadAsync(async () =>
        {
            if (isDarkMode)
                await JS.InvokeVoidAsync("setTheme", "dark");
            else
                await JS.InvokeVoidAsync("setTheme", "light");
            StateHasChanged();
        });
    }
}